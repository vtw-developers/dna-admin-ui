type Query {
  authorities(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): AuthorityPage
  authorityList(name: String): [Authority]
  authority(id: ID): Authority
  users(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): UsersPage
  userRoll(company: String, role: String): [Users]
  user(id: ID): Users

  roles(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): RolesPage
  rolesList(name: String): [Role]
  role(id: ID): Role

  roleDataList(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): RoleDataPage
  roleData(id: ID): RoleData
}

type Mutation {
  createAuthority(authority: AuthorityInput): Authority
  updateAuthority(authority: AuthorityInput): Authority
  deleteAuthority(id: ID): Authority

  createUsers(users: UsersInput): Users
  updateUsers(users: UsersInput): Users
  deleteUsers(id: ID): Users

  createRole(role: RolesInput): Role
  updateRole(role: RolesInput): Role
  deleteRole(id: ID): Role

  createRoleData(roleData: RoleDataInput): RoleData
  deleteRoleData(id: ID): RoleData
}

type Authority {
  id: ID
  name: String
  detail: String
}

input AuthorityInput {
  id: ID
  name: String
  detail: String
}

type AuthorityPage {
  totalElements: Int
  content: [Authority]
}

type Users {
  id: ID
  userId: String
  dept: String
  role: String
}

input UsersInput {
  id: ID
  userId: String
  dept: String
  role: String
}

type UsersPage {
  totalElements: Int
  content: [Users]
}

type Role {
  id: ID
  name: String
  detail:String
  type: String
  icon: String
  expanded: Boolean
  authorities: [Authority]
}

type RolesPage {
  totalElements: Int
  content: [Role]
}

input RolesInput {
  id: ID
  name: String
  detail:String
  type: String
  icon: String
  expanded: Boolean
}

type RoleData {
  id: ID
  authority: Authority
  role: Role
}

input RoleDataInput {
  id: ID
  authority: AuthorityInput
  role: RolesInput
}

type RoleDataPage {
  totalElements: Int
  content: [RoleData]
}
