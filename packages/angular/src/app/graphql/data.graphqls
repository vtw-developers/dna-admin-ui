type Query {
  authorities(name: String): [Authority]
  authorityLists(name: String): [AuthorityList]
  users(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): UsersPage
  user(id: ID): Users
}

type Mutation {
  createAuthority(authority: AuthorityInput): Authority
  deleteAuthority(id: ID): Authority

  createAuthorityList(authorityList: AuthorityListInput): AuthorityList
  deleteAuthorityList(id: ID): AuthorityList

  createUsers(users: UsersInput): Users
  updateUsers(users: UsersInput): Users
  deleteUsers(id: ID): Users
}

type Authority {
  id: ID
  name: String
  detail: String
}

input AuthorityInput {
  id: ID
  name: String
  detail: String
}

type AuthorityList {
  id: ID
  name: String
  registerDate: String
  userId: String
  userCompany: String
}

input AuthorityListInput {
  id: ID
  name: String
  registerDate: String
  userId: String
  userCompany: String
}

type Users {
  id: ID
  userId: String
  company: String
  phone: String
  authority: String
}

input UsersInput {
  id: ID
  userId: String
  company: String
  phone: String
  authority: String
}

type UsersPage {
  totalElements: Int
  content: [Users]
}
