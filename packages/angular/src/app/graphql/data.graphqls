type Query {
  authorities(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): AuthorityPage
  authorityList(name: String): [Authority]
  authority(id: ID): Authority

  users(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): UsersPage
  user(id: ID): Users

  roles(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): RolesPage
  rolesList(name: String): [Role]
  role(id: ID): Role

  roleAuthList(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): RoleAuthPage
  usersList(name: String): [Users]
  roleAuth(id: ID): RoleAuth

  roleUserList(page: Int, size: Int, sortBy: String, sortDir: String, filter: String): RoleUserPage
  roleUser(id: ID): RoleUser
}

type Mutation {
  createAuthority(authority: AuthorityInput): Authority
  updateAuthority(authority: AuthorityInput): Authority
  deleteAuthority(id: ID): Authority

  createUsers(users: UsersInput): Users
  updateUsers(users: UsersInput): Users
  deleteUsers(id: ID): Users

  createRole(role: RolesInput): Role
  updateRole(role: RolesInput): Role
  deleteRole(id: ID): Role

  createRoleAuth(roleAuth: RoleAuthInput): RoleAuth
  deleteRoleAuth(id: ID): RoleAuth

  createRoleUser(roleUser: RoleUserInput): RoleUser
  deleteRoleUser(id: ID): RoleUser
}

type Authority {
  id: ID
  name: String
  detail: String
}

input AuthorityInput {
  id: ID
  name: String
  detail: String
}

type AuthorityPage {
  totalElements: Int
  content: [Authority]
}

type Users {
  id: ID
  userId: String
  password: String
  name: String
  phone: String
  mail: String
}

input UsersInput {
  id: ID
  userId: String
  password: String
  name: String
  phone: String
  mail: String
}

type UsersPage {
  totalElements: Int
  content: [Users]
}

type Role {
  id: ID
  name: String
  detail:String
  type: String
  icon: String
  expanded: Boolean
  authorities: [Authority]
}

type RolesPage {
  totalElements: Int
  content: [Role]
}

input RolesInput {
  id: ID
  name: String
  detail:String
  type: String
  icon: String
  expanded: Boolean
}

type RoleAuth {
  id: ID
  authority: Authority
  role: Role
}

input RoleAuthInput {
  id: ID
  authority: AuthorityInput
  role: RolesInput
}

type RoleAuthPage {
  totalElements: Int
  content: [RoleAuth]
}

type RoleUser {
  id: ID
  users: Users
  role: Role
}

input RoleUserInput {
  id: ID
  users: UsersInput
  role: RolesInput
}

type RoleUserPage {
  totalElements: Int
  content: [RoleUser]
}
